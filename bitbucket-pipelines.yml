image: node:10

clone:
    depth: full # SonarCloud scanner needs the full history to assign issues properly

definitions:
    caches:
        sonar: ~/.sonar/cache # Caching SonarCloud artifacts will speed up your build
    services:
        docker:
            memory: 2048 # Increasing Docker Memory Size to 2GB instead of defailt 1GB
    steps:
        # DEFINE Mirror to Github STEP
        - step: &github
              name: "Mirror to Github"

              script:
                  - git push --mirror git@github.com:project-alkemi/alkemi-earn-ui.git

        # DEFINE Test Step
        - step: &test
              name: "Test"

              caches:
                  - node
              script:
                  # Increase Node Memory Size to 3GB instead of default 512MB
                  - export NODE_OPTIONS=--max_old_space_size=3072
                  - echo "Installing"
                  - npm install --quiet
                  - echo "Testing"
                  - npm run test

        # DEFINE Code Analysis
        - step: &analyze
              name: Code Analysis
              caches:
                  - node
                  - sonar
              script:
                  # Increase Node Memory Size to 2GB instead of default 512MB
                  - export NODE_OPTIONS=--max_old_space_size=2048
                  - npm install --quiet
                  - npm run test
                  - pipe: sonarsource/sonarcloud-scan:1.0.1

        # DEFINE Code Quality Gate
        - step: &quality-gate
              name: Code Quality Enforcement
              script:
                  - pipe: sonarsource/sonarcloud-quality-gate:0.1.3
                  # If the quality requirements aren't passed as defined in Sonar, Build will Fail

        # DEFINE Build Step
        - step: &build
              name: "Build"

              size: 2x

              caches:
                  - node
              script:
                  # Increase Node Memory Size to 7GB instead of default 512MB
                  - export NODE_OPTIONS=--max_old_space_size=7168
                  - echo "Build"
                  - npm install --quiet
                  - npm run build
              artifacts:
                  # keep all files from this build step and make available for next step
                  - build/**

        # DEFINE Upload to AWS Step
        - step: &upload
              caches:
                  - node
              name: "Upload to AWS"
              script:
                  # ZIP PACKAGE INSTALLATIONS
                  - echo "Zip & Upload"
                  - apt-get update
                  - apt-get install jq zip -y
                  # Declare Package VERSION
                  - declare -x VERSION=$(jq -r '.version' package.json)
                  - echo "$VERSION"
                  # Zip BITBUCKET_CLONE_DIR
                  - zip -r application.zip .
                  # Docker Pipe gets 2GB of Memory
                  - pipe: atlassian/aws-elasticbeanstalk-deploy:0.5.5
                    variables:
                        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                        APPLICATION_NAME: "$APPLICATION_NAME"
                        COMMAND: "upload-only"
                        ZIP_FILE: "application.zip"
                        VERSION_LABEL: "$APPLICATION_NAME-$VERSION-$BITBUCKET_BUILD_NUMBER"

        # DEFINE Update Docs to Confluence Step
        - step: &docs
              name: "README to Confluence"
              script:
                  - set -ex && apt-get update && apt-get install -y ca-certificates gcc musl-dev git mercurial zip curl
                  - echo "Updating Readme.md to Confluence Documentation"
                  - curl -LO https://github.com/justmiles/go-markdown2confluence/releases/download/v3.0.2/markdown2confluence_3.0.2_linux_x86_64.tar.gz
                  - tar -xzvf markdown2confluence_3.0.2_linux_x86_64.tar.gz -C /usr/local/bin/ markdown2confluence
                  - markdown2confluence -u $CONFLUENCE_USER -p $CONFLUENCE_PASSWORD -e $CONFLUENCE_ENDPOINT -s 'ARCH' --parent 'Repositories' -t 'alkemi-debt-ui' -d README.md

        # DEFINE DEPLOY TO STAGING step
        - step: &deploy-staging
              name: "Deploy to Staging"
              deployment: staging
              script:
                  - echo "$VERSION Deployment to Staging!"
                  - apt-get update
                  - apt-get install jq -y
                  - declare -x VERSION=$(jq -r '.version' package.json)
                  - pipe: atlassian/aws-elasticbeanstalk-deploy:0.5.5
                    variables:
                        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                        APPLICATION_NAME: "$APPLICATION_NAME"
                        COMMAND: "deploy-only"
                        VERSION_LABEL: "$APPLICATION_NAME-$VERSION-$BITBUCKET_BUILD_NUMBER"
                        ENVIRONMENT_NAME: "$APPLICATION_NAME-dev"
                        WAIT: "true"
        # DEFINE DEPLOY TO PRODUCTION STEP
        - step: &deploy-production
              name: "Deploy to Production"
              deployment: production
              trigger: manual
              script:
                  - echo "Deployment to Production!"
                  - apt-get update
                  - apt-get install jq -y
                  - declare -x VERSION=$(jq -r '.version' package.json)
                  - pipe: atlassian/aws-elasticbeanstalk-deploy:0.5.5
                    variables:
                        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                        APPLICATION_NAME: "$APPLICATION_NAME"
                        COMMAND: "deploy-only"
                        VERSION_LABEL: "$APPLICATION_NAME-$VERSION-$BITBUCKET_BUILD_NUMBER"
                        ENVIRONMENT_NAME: "$APPLICATION_NAME-production"
                        WAIT: "true"

pipelines:
    default:
        # This runs on every single push
        - step: *test
        - step: *github

    pull-requests:
        # Runs on all pull requests
        "**":
            - step: *analyze
            - step: *build
            #  - step: *quality-gate

    branches:
        master:
            # Runs only on Master Branch
            - step: *analyze
            #  - step: *quality-gate
            - step: *build
            - step: *upload
            - step: *docs
            - step: *deploy-staging
            - step: *deploy-production
